// This function must be in the global scope for the Spotify SDK to find it.
window.onSpotifyWebPlaybackSDKReady = () => {
    console.log("Spotify Web Playback SDK is ready.");
    // The player will now be initialized when the 'spotify' command is received.
};

window.onload = function () {
    console.log("Tizen App Loaded.");

    const SERVER_IP = '192.168.1.108';
    const SERVER_PORT = 8080;
    
    const mainContent = document.getElementById('main-content');
    const sideBanner = document.getElementById('side-banner');
    const bottomTickerText = document.querySelector('#bottom-ticker .scrolling-text p');
    
    let carouselInterval = null;
    let ytPlayer;
    let spotifyPlayer;

    let isYouTubeApiReady = false;
    let commandQueue = [];

    // This function is called by the YouTube script.
    window.onYouTubeIframeAPIReady = function() {
        console.log("YouTube IFrame API is ready.");
        isYouTubeApiReady = true;
        while(commandQueue.length > 0) {
            handleCommand(commandQueue.shift());
        }
    };

    function connectWebSocket() {
        if (!SERVER_IP || SERVER_IP === '192.168.1.108') {
            console.error("SERVER_IP is not set. Please edit js/main.js and set the correct IP address.");
            bottomTickerText.textContent = "Configuration Error: Server IP not set.";
            return;
        }
        const ws = new WebSocket(`ws://${SERVER_IP}:${SERVER_PORT}`);

        ws.onopen = () => {
            console.log("WebSocket connection established.");
            ws.send("Tizen TV reporting for duty!");
        };

        ws.onmessage = (event) => {
            console.log("[Client] Received raw data:", event.data);
            try {
                const command = JSON.parse(event.data);
                console.log("[Client] Parsed command:", command);

                if ((command.contentType === 'youtube' || command.contentType === 'youtubePlaylist') && !isYouTubeApiReady) {
                    console.log("YouTube API not ready, queuing command.");
                    commandQueue.push(command);
                } else {
                    handleCommand(command);
                }
            }
            catch (e) {
                console.error("Failed to handle command:", e);
                // Display non-JSON messages directly in the ticker for debugging.
                bottomTickerText.textContent = event.data;
            }
        };

        ws.onclose = () => {
            console.log("WebSocket connection closed. Reconnecting in 3 seconds...");
            setTimeout(connectWebSocket, 3000);
        };
        ws.onerror = (err) => console.error('[Client] WebSocket Error: ', err.message);
    }

    function handleCommand(command) {
        switch (command.target) {
            case 'ticker': 
                console.log("Handling 'ticker' command.");
                updateTicker(command.content); 
                break;
            case 'banner': 
                console.log("Handling 'banner' command.");
                updateBanner(command.content); 
                break;
            case 'mainZone': 
                console.log("Handling 'mainZone' command with type:", command.contentType);
                updateMainContent(command.contentType, command.content); 
                break;
            case 'spotify': 
                console.log("Handling 'spotify' command.");
                initializeSpotifyPlayer(command.content); 
                break;
            case 'layout': 
                console.log("Handling 'layout' command.");
                updateLayout(command.content); 
                break;
            default: 
                console.warn("Unknown command target:", command.target);
        }
    }
    
    function initializeSpotifyPlayer(content) {
        if (spotifyPlayer) {
            spotifyPlayer.disconnect();
        }
        
        spotifyPlayer = new Spotify.Player({
            name: 'Gaelenix Display',
            getOAuthToken: cb => { cb(content.accessToken); }
        });

        spotifyPlayer.addListener('ready', ({ device_id }) => console.log('Spotify Player Ready with Device ID', device_id));
        spotifyPlayer.addListener('not_ready', ({ device_id }) => console.log('Device ID has gone offline', device_id));
        spotifyPlayer.addListener('initialization_error', ({ message }) => console.error('Spotify Init Error:', message));
        spotifyPlayer.addListener('authentication_error', ({ message }) => console.error('Spotify Auth Error:', message));
        spotifyPlayer.addListener('account_error', ({ message }) => console.error('Spotify Account Error:', message));
        
        spotifyPlayer.connect().then(success => {
            if (success) {
                console.log('The Spotify Player connected successfully!');
            }
        });
    }

    function updateLayout(content) {
        const container = document.querySelector('.container');
        if (!container) return;
        container.classList.remove('layout-fullscreen', 'layout-wide');

        if (content.mode === 'fullscreen' || content.mode === 'wide') {
            container.classList.add(`layout-${content.mode}`);
        }
    }
    
    function updateTicker(content) {
        if (content.messages && Array.isArray(content.messages)) {
            bottomTickerText.textContent = content.messages.join('   •••   ');
        }
    }
    
    function updateBanner(content) {
        const images = content.images;
        if (!images || images.length === 0) {
            sideBanner.innerHTML = '<img src="https://placehold.co/480x810/1F2937/FFFFFF?text=Side+Banner" alt="Promotional Banner" class="active">';
            if (carouselInterval) clearInterval(carouselInterval);
            return;
        }

        if (carouselInterval) clearInterval(carouselInterval);
        sideBanner.innerHTML = ''; 

        images.forEach((src, index) => {
            const img = document.createElement('img');
            img.src = src;
            img.alt = "Promotional Banner";
            if (index === 0) img.classList.add('active');
            sideBanner.appendChild(img);
        });

        if (images.length > 1) {
            let currentIndex = 0;
            carouselInterval = setInterval(() => {
                const allImages = sideBanner.querySelectorAll('img');
                allImages[currentIndex].classList.remove('active');
                currentIndex = (currentIndex + 1) % allImages.length;
                allImages[currentIndex].classList.add('active');
            }, 5000); 
        }
    }

    function updateMainContent(type, content) {
        // For signage, sound should be off by default to respect autoplay policies.
        // We will ignore the soundEnabled flag from the controller for now.
        const soundEnabled = false; 

        if (ytPlayer && typeof ytPlayer.destroy === 'function') {
            ytPlayer.destroy();
            ytPlayer = null;
        }
        mainContent.innerHTML = '';

        if (type === 'youtube' || type === 'youtubePlaylist') {
            mainContent.innerHTML = '<div id="youtube-player"></div>';
            
            let playerVars = {
                autoplay: 1,
                controls: 0,
                loop: 1,
                mute: 1 // ALWAYS start muted
            };

            if (type === 'youtubePlaylist') {
                playerVars.listType = 'playlist';
                playerVars.list = content.playlistId;
            } else {
                // For single video looping, the playlist param must be set to the video ID
                playerVars.playlist = content.videoId;
            }
            
            ytPlayer = new YT.Player('youtube-player', {
                height: '100%',
                width: '100%',
                videoId: type === 'youtube' ? content.videoId : undefined,
                playerVars: playerVars
            });

        } else if (type === 'localVideo') {
            mainContent.innerHTML = `
                <video id="local-player" width="100%" height="100%"
                       src="${content.videoUrl}" autoplay loop muted>
                </video>`;
        }
    }

    connectWebSocket();
};