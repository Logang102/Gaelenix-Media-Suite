// --- Global Scope ---
// These variables and functions must be global so they are available
// as soon as any script loads.

let ytPlayer;
let spotifyPlayer;
let isYouTubeApiReady = false;
let commandQueue = [];

// This function is now guaranteed to be available when the YouTube API script calls it.
window.onYouTubeIframeAPIReady = function() {
    console.log("âœ… YouTube IFrame API is ready.");
    isYouTubeApiReady = true;
    
    // Process any commands that were queued before the API was ready
    while(commandQueue.length > 0) {
        handleTizenCommand(commandQueue.shift());
    }
};

// This function must also be global for the Spotify SDK.
window.onSpotifyWebPlaybackSDKReady = () => {
    console.log("âœ… Spotify Web Playback SDK is ready.");
};

/**
 * The main command router. It's now global to be accessible from the command queue.
 * @param {object} command The command received from the controller.
 */
function handleTizenCommand(command) {
    // We get references to DOM elements here, inside the handler,
    // to ensure the DOM is loaded before we try to manipulate it.
    const mainContent = document.getElementById('main-content');
    const sideBanner = document.getElementById('side-banner');
    const bottomTickerText = document.querySelector('#bottom-ticker .scrolling-text p');

    switch (command.target) {
        case 'ticker': 
            console.log("Handling 'ticker' command.");
            updateTicker(command.content, bottomTickerText); 
            break;
        case 'banner': 
            console.log("Handling 'banner' command.");
            updateBanner(command.content, sideBanner); 
            break;
        case 'mainZone': 
            console.log("Handling 'mainZone' command with type:", command.contentType);
            updateMainContent(command.contentType, command.content, mainContent); 
            break;
        case 'spotify': 
            console.log("Handling 'spotify' command.");
            initializeSpotifyPlayer(command.content); 
            break;
        case 'layout': 
            console.log("Handling 'layout' command.");
            updateLayout(command.content); 
            break;
        default: 
            console.warn("Unknown command target:", command.target);
    }
}


// --- Main Application Logic ---
window.onload = function () {
    console.log("Tizen App DOM Loaded.");

    // IMPORTANT: Replace with the IP address shown in your Electron app's console.
    const SERVER_IP = '192.168.1.108'; 
    const SERVER_PORT = 8080;
    
    function connectWebSocket() {
        if (!SERVER_IP || SERVER_IP === 'YOUR_COMPUTER_IP_ADDRESS') {
            const tickerText = document.querySelector('#bottom-ticker .scrolling-text p');
            console.error("SERVER_IP is not set. Please edit js/main.js and set the correct IP address.");
            if(tickerText) tickerText.textContent = "Configuration Error: Server IP not set.";
            return;
        }
        
        const ws = new WebSocket(`ws://${SERVER_IP}:${SERVER_PORT}`);

        ws.onopen = () => console.log("ðŸ”Œ WebSocket connection established.");
        ws.onclose = () => setTimeout(connectWebSocket, 3000);
        ws.onerror = (err) => console.error('WebSocket Error: ', err.message);

        ws.onmessage = (event) => {
            try {
                const command = JSON.parse(event.data);
                console.log("ðŸ“© [Client] Received command:", command);

                if ((command.target === 'mainZone' && (command.contentType === 'youtube' || command.contentType === 'youtubePlaylist')) && !isYouTubeApiReady) {
                    console.log("ðŸ•’ YouTube API not ready, queuing command.");
                    commandQueue.push(command);
                } else {
                    handleTizenCommand(command);
                }
            }
            catch (e) {
                console.error("Failed to handle command:", e);
            }
        };
    }

    connectWebSocket();
};


// --- Content Update Functions ---
// These are now also in the global scope.

function initializeSpotifyPlayer(content) {
    if (spotifyPlayer) spotifyPlayer.disconnect();
    
    spotifyPlayer = new Spotify.Player({
        name: 'Gaelenix Display',
        getOAuthToken: cb => { cb(content.accessToken); }
    });

    spotifyPlayer.addListener('ready', ({ device_id }) => console.log('Spotify Player Ready with Device ID', device_id));
    spotifyPlayer.connect();
}

function updateLayout(content) {
    const container = document.querySelector('.container');
    if (!container) return;
    container.classList.remove('layout-fullscreen', 'layout-wide');
    if (content.mode === 'fullscreen' || content.mode === 'wide') {
        container.classList.add(`layout-${content.mode}`);
    }
}

function updateTicker(content, tickerElement) {
    if (content.messages && Array.isArray(content.messages)) {
        tickerElement.textContent = content.messages.join('   â€¢â€¢â€¢   ');
    }
}

let carouselInterval = null;
function updateBanner(content, bannerElement) {
    if (carouselInterval) clearInterval(carouselInterval);
    bannerElement.innerHTML = ''; 

    const images = content.images;
    if (!images || images.length === 0) {
        bannerElement.innerHTML = '<img src="https://placehold.co/480x810/1F2937/FFFFFF?text=Side+Banner" alt="Promotional Banner" class="active">';
        return;
    }

    images.forEach((src, index) => {
        const img = document.createElement('img');
        img.src = src;
        img.alt = "Promotional Banner";
        if (index === 0) img.classList.add('active');
        bannerElement.appendChild(img);
    });

    if (images.length > 1) {
        let currentIndex = 0;
        carouselInterval = setInterval(() => {
            const allImages = bannerElement.querySelectorAll('img');
            allImages[currentIndex].classList.remove('active');
            currentIndex = (currentIndex + 1) % allImages.length;
            allImages[currentIndex].classList.add('active');
        }, 5000); 
    }
}

function updateMainContent(type, content, mainContentElement) {
    if (ytPlayer && typeof ytPlayer.destroy === 'function') {
        ytPlayer.destroy();
        ytPlayer = null;
    }
    mainContentElement.innerHTML = '';

    if (type === 'youtube' || type === 'youtubePlaylist') {
        mainContentElement.innerHTML = '<div id="youtube-player"></div>';
        
        let playerVars = { autoplay: 1, controls: 0, loop: 1, mute: 1 };

        if (type === 'youtubePlaylist') {
            playerVars.listType = 'playlist';
            playerVars.list = content.playlistId;
        } else {
            playerVars.playlist = content.videoId;
        }
        
        ytPlayer = new YT.Player('youtube-player', {
            height: '100%',
            width: '100%',
            videoId: (type === 'youtube') ? content.videoId : undefined,
            playerVars: playerVars
        });

    } else if (type === 'localVideo') {
        mainContentElement.innerHTML = `
            <video id="local-player" width="100%" height="100%"
                   src="${content.videoUrl}" autoplay loop muted>
            </video>`;
    }
}