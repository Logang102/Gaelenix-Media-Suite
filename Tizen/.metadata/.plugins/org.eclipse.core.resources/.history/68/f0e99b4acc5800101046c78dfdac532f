// This function must be in the global scope for the YouTube API script to find it.
window.onYouTubeIframeAPIReady = function() {
    // This will now be logged correctly when the YouTube API is ready.
    console.log("YouTube IFrame API is ready.");
    window.isYouTubeApiReady = true; // Use a global flag

    // Process any commands that were queued before the API was ready
    const commandQueue = window.tizenCommandQueue || [];
    while(commandQueue.length > 0) {
        window.handleTizenCommand(commandQueue.shift());
    }
};

// This function must also be global for the Spotify SDK.
window.onSpotifyWebPlaybackSDKReady = () => {
    console.log("Spotify Web Playback SDK is ready.");
};

window.onload = function () {
    console.log("Tizen App Loaded.");

    // --- Configuration ---
    // IMPORTANT: Replace with the IP address shown in your Electron app's console.
    const SERVER_IP = '192.168.1.108'; 
    const SERVER_PORT = 8080;
    
    // --- Element References ---
    const mainContent = document.getElementById('main-content');
    const sideBanner = document.getElementById('side-banner');
    const bottomTickerText = document.querySelector('#bottom-ticker .scrolling-text p');
    
    // --- State Variables ---
    let carouselInterval = null;
    let ytPlayer;
    let spotifyPlayer;

    // --- Initialize Global State ---
    window.isYouTubeApiReady = false;
    window.tizenCommandQueue = [];

    // --- WebSocket Connection ---
    function connectWebSocket() {
        if (!SERVER_IP || SERVER_IP === 'YOUR_COMPUTER_IP_ADDRESS') {
            console.error("SERVER_IP is not set. Please edit js/main.js and set the correct IP address.");
            bottomTickerText.textContent = "Configuration Error: Server IP not set.";
            return;
        }
        
        const ws = new WebSocket(`ws://${SERVER_IP}:${SERVER_PORT}`);

        ws.onopen = () => {
            console.log("WebSocket connection established.");
            ws.send("Tizen TV reporting for duty!");
        };

        ws.onmessage = (event) => {
            console.log("[Client] Received raw data:", event.data);
            try {
                const command = JSON.parse(event.data);
                console.log("[Client] Parsed command:", command);

                // If a YouTube command arrives before the API is ready, queue it.
                if ((command.contentType === 'youtube' || command.contentType === 'youtubePlaylist') && !window.isYouTubeApiReady) {
                    console.log("YouTube API not ready, queuing command.");
                    window.tizenCommandQueue.push(command);
                } else {
                    window.handleTizenCommand(command);
                }
            }
            catch (e) {
                console.error("Failed to handle command:", e);
                bottomTickerText.textContent = event.data;
            }
        };

        ws.onclose = () => {
            console.log("WebSocket connection closed. Reconnecting in 3 seconds...");
            setTimeout(connectWebSocket, 3000);
        };
        ws.onerror = (err) => console.error('[Client] WebSocket Error: ', err.message);
    }

    // --- Command Handling ---
    window.handleTizenCommand = function(command) {
        switch (command.target) {
            case 'ticker': 
                console.log("Handling 'ticker' command.");
                updateTicker(command.content); 
                break;
            case 'banner': 
                console.log("Handling 'banner' command.");
                updateBanner(command.content); 
                break;
            case 'mainZone': 
                console.log("Handling 'mainZone' command with type:", command.contentType);
                updateMainContent(command.contentType, command.content); 
                break;
            case 'spotify': 
                console.log("Handling 'spotify' command.");
                initializeSpotifyPlayer(command.content); 
                break;
            case 'layout': 
                console.log("Handling 'layout' command.");
                updateLayout(command.content); 
                break;
            default: 
                console.warn("Unknown command target:", command.target);
        }
    }
    
    function initializeSpotifyPlayer(content) {
        if (spotifyPlayer) {
            spotifyPlayer.disconnect();
        }
        
        spotifyPlayer = new Spotify.Player({
            name: 'Gaelenix Display',
            getOAuthToken: cb => { cb(content.accessToken); }
        });

        spotifyPlayer.addListener('ready', ({ device_id }) => console.log('Spotify Player Ready with Device ID', device_id));
        // ... other spotify listeners
        
        spotifyPlayer.connect();
    }

    function updateLayout(content) {
        const container = document.querySelector('.container');
        if (!container) return;
        container.classList.remove('layout-fullscreen', 'layout-wide');

        if (content.mode === 'fullscreen' || content.mode === 'wide') {
            container.classList.add(`layout-${content.mode}`);
        }
    }
    
    function updateTicker(content) {
        if (content.messages && Array.isArray(content.messages)) {
            bottomTickerText.textContent = content.messages.join('   •••   ');
        }
    }
    
    function updateBanner(content) {
        // ... (This function remains the same as the previous correct version)
    }

    function updateMainContent(type, content) {
        if (ytPlayer && typeof ytPlayer.destroy === 'function') {
            ytPlayer.destroy();
            ytPlayer = null;
        }
        mainContent.innerHTML = '';

        if (type === 'youtube' || type === 'youtubePlaylist') {
            mainContent.innerHTML = '<div id="youtube-player"></div>';
            
            let playerVars = {
                autoplay: 1,
                controls: 0,
                loop: 1,
                mute: 1 // ALWAYS start muted to comply with autoplay policy
            };

            if (type === 'youtubePlaylist') {
                playerVars.listType = 'playlist';
                playerVars.list = content.playlistId;
            } else {
                playerVars.playlist = content.videoId;
            }
            
            ytPlayer = new YT.Player('youtube-player', {
                height: '100%',
                width: '100%',
                videoId: (type === 'youtube') ? content.videoId : undefined,
                playerVars: playerVars
            });

        } else if (type === 'localVideo') {
            mainContent.innerHTML = `
                <video id="local-player" width="100%" height="100%"
                       src="${content.videoUrl}" autoplay loop muted>
                </video>`;
        }
    }

    // Start the connection
    connectWebSocket();
};